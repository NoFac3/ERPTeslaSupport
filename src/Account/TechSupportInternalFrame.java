package Account;

import Ticket.TicketLockFrame;
import Ticket.TicketFrame;
import Ticket.findTicketFrame;
import Query.QueryTicket;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 * TechSupportInternalFrame.java - for users with tech permissions. Displays table 
 * of support tickets
 * CSIS 643 - D01
 * @author Kore Woody
 */
public class TechSupportInternalFrame extends javax.swing.JInternalFrame implements ListSelectionListener {

    public String nameofTech;
    public static String name,firstName,lastName,department,userID;
    public static boolean isAdmin,isManager,isEngineer,isAnalyst,isTech;
    
    /**
     * Creates new form TechSupportInternalFrame
     * @param userID
     * @param name
     * @param firstName
     * @param lastName
     * @param isAnalyst
     * @param isAdmin
     * @param isEngineer
     * @param department
     * @param isManager
     * @param isTech
     */
    public TechSupportInternalFrame(
            String userID, String name, 
            String firstName, String lastName, String department, 
            boolean isAdmin, boolean isManager, boolean isEngineer, 
            boolean isAnalyst, boolean isTech) {
        super("Support Tickets",true,false,true);
        
        // set user values
        this.nameofTech = name;
        this.userID = userID;
        this.name = name;
        this.firstName = firstName;
        this.lastName = lastName;
        this.department = department;
        this.isAdmin = isAdmin;
        this.isManager = isManager;
        this.isEngineer = isEngineer;
        this.isAnalyst = isAnalyst;
        this.isTech = isTech;
        
        initComponents();
        
        //Initializes new QueryTicket Object
        QueryTicket qt = new QueryTicket();
        
        // check user mermissions then query for ticket table model
        if (isManager==false && isAdmin==false)
        {
            qt.selectTickets(userID);
            mnuTicket.setVisible(false);
            mnuTicket.setEnabled(false);
        }
        else// is manager or admin
        {
            qt.selectTickets();// query all tickets
        }
        // get model
        DefaultTableModel model = qt.getModel();
        if (model!=null)
        {
            // update tickets table
            tblTickets.setAutoCreateRowSorter(true);
            tblTickets.setModel(qt.getModel());
            tblTickets.repaint();
            tblTickets.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tblTickets.getSelectionModel().addListSelectionListener(this.tblTickets);
        }
        this.pack(); 
        
        // instantiate new Account notification
        AccountNotification notify = new AccountNotification(this);
    }// end TechSuportInternalFrame constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnNewTicket = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        tblTickets = new javax.swing.JTable();
        mnuBar = new javax.swing.JMenuBar();
        mnuTicket = new javax.swing.JMenu();
        mnuTicketNew = new javax.swing.JMenuItem();
        mnuTicketEdit = new javax.swing.JMenuItem();
        mnuTicketSearch = new javax.swing.JMenuItem();
        mnuTicketClose = new javax.swing.JMenuItem();
        mnuTicketLock = new javax.swing.JMenuItem();
        mnuGuide = new javax.swing.JMenu();
        mnuGuideSearch = new javax.swing.JMenuItem();
        mnuGuideEdit = new javax.swing.JMenuItem();
        mnuGuideDelete = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();

        setMinimumSize(new java.awt.Dimension(900, 100));

        btnNewTicket.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/03.png"))); // NOI18N
        btnNewTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewTicketActionPerformed(evt);
            }
        });

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/27.png"))); // NOI18N
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        tblTickets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "#", "Status", "Priority", "Assigned To", "Customer ID", "Title", "Open On", "Edit On", "Close On", "Open By", "Edit By", "Close By"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblTickets.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTicketsMouseClicked(evt);
            }
        });
        jScrollPane.setViewportView(tblTickets);

        mnuTicket.setText("Ticket");

        mnuTicketNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_DOWN_MASK));
        mnuTicketNew.setText("New Ticket");
        mnuTicketNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuTicketNewActionPerformed(evt);
            }
        });
        mnuTicket.add(mnuTicketNew);

        mnuTicketEdit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK));
        mnuTicketEdit.setText("Edit Ticket");
        mnuTicketEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuTicketEditActionPerformed(evt);
            }
        });
        mnuTicket.add(mnuTicketEdit);

        mnuTicketSearch.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_DOWN_MASK));
        mnuTicketSearch.setText("Find Ticket");
        mnuTicketSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuTicketSearchActionPerformed(evt);
            }
        });
        mnuTicket.add(mnuTicketSearch);

        mnuTicketClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_DOWN_MASK));
        mnuTicketClose.setText("Close Ticket");
        mnuTicketClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuTicketCloseActionPerformed(evt);
            }
        });
        mnuTicket.add(mnuTicketClose);

        mnuTicketLock.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_DOWN_MASK));
        mnuTicketLock.setText("Lock/Unlock Ticket");
        mnuTicketLock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuTicketLockActionPerformed(evt);
            }
        });
        mnuTicket.add(mnuTicketLock);

        mnuBar.add(mnuTicket);

        mnuGuide.setText("Guide");

        mnuGuideSearch.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_DOWN_MASK));
        mnuGuideSearch.setText("Search Guide");
        mnuGuide.add(mnuGuideSearch);

        mnuGuideEdit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuGuideEdit.setText("Edit Guide");
        mnuGuide.add(mnuGuideEdit);

        mnuGuideDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuGuideDelete.setText("Delete Guide");
        mnuGuide.add(mnuGuideDelete);

        mnuBar.add(mnuGuide);

        mnuHelp.setText("Help");
        mnuBar.add(mnuHelp);

        setJMenuBar(mnuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1138, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewTicket)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefresh)
                    .addComponent(btnNewTicket))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * btnNewTicketActionPerformed listens for new ticket button
     * @param evt 
     */
    private void btnNewTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewTicketActionPerformed
        String ticketNumber = null;
        // open new ticket frame
        new TicketFrame(true,
                    ticketNumber,userID,name,
                    firstName,lastName,department,
                isAdmin,isManager,isEngineer,isAnalyst,isTech).setVisible(true);
    }//GEN-LAST:event_btnNewTicketActionPerformed
    // end btnNewTicketActionPerformed method
    
    /**
     * 
     * @param evt 
     */
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed
    // end btnRefreshActionPerformed method
    
    /**
     * tblTicketsMouseClicked method opens 
     * @param evt table row selected
     */
    private void tblTicketsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTicketsMouseClicked
       
        if (evt.getClickCount()==1) // check for double click
        {
            int row = tblTickets.getSelectedRow(); // get selected row

            if (row!=-1)// row is selected
            {
                // get ticket number
                String ticketNumber = tblTickets.getModel().getValueAt(row, 0).toString();
                // create ticket frame
                new TicketFrame(false,
                        ticketNumber,userID,name,
                        firstName,lastName,department,
                    isAdmin,isManager,isEngineer,isAnalyst,isTech).setVisible(true);
            }
        }
    }//GEN-LAST:event_tblTicketsMouseClicked
    // end tblTicketsMouseClicked method
    
    /**
     * mnuTicketNewActionPerformed method opens new ticket frame
     * @param evt 
     */
    private void mnuTicketNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTicketNewActionPerformed
        String ticketNumber = null;
        // create new ticket frame
        new TicketFrame(true,
                    ticketNumber,userID,name,
                    firstName,lastName,department,
                isAdmin,isManager,isEngineer,isAnalyst,isTech).setVisible(true);
    }//GEN-LAST:event_mnuTicketNewActionPerformed
    // end mnuTicketNewActionPerformed method
    
    /**
     * mnuTicketEditActionPerformed method opens ticket search frame
     * @param evt ticket edit menu pressed
     */
    private void mnuTicketEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTicketEditActionPerformed
        new findTicketFrame().setVisible(true);
    }//GEN-LAST:event_mnuTicketEditActionPerformed
    // end mnuTicketEditActionPerformed method
    
    /**
     * mnuTicketSearchActionPerformed method opens ticket search frame
     * @param evt menu search ticket button selected
     */
    private void mnuTicketSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTicketSearchActionPerformed
        new findTicketFrame().setVisible(true);
    }//GEN-LAST:event_mnuTicketSearchActionPerformed
    // end mnuTicketSearchActionPerformed method   
    
    /**
     * mnuTicketCloseActionPerformed method
     * @param evt 
     */
    private void mnuTicketCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTicketCloseActionPerformed
        new findTicketFrame().setVisible(true);
    }//GEN-LAST:event_mnuTicketCloseActionPerformed
    // end mnuTicketCloseActionPerformed method
    
    /**
     * mnuTicketLockActionPerformed method
     * @param evt 
     */
    private void mnuTicketLockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTicketLockActionPerformed
        new TicketLockFrame().setVisible(true);
    }//GEN-LAST:event_mnuTicketLockActionPerformed
    // end mnuTicketLockActionPerformed method
    
    /**
     * refresh method updates the ticket table
     */
    public void refresh()
    {
        QueryTicket qt = new QueryTicket();
        
        // check for account priveleges
        if (isManager==false && isAdmin==false)// get user tickets
        {
            qt.selectTickets(userID);
        }
        else// get all tickets
        {
            qt.selectTickets();
        }
        // instantiate new DefaultTableModel and get table model
        DefaultTableModel model = qt.getModel();
        if (model!=null)
        {
            // update table
            tblTickets.setAutoCreateRowSorter(true);
            tblTickets.setModel(qt.getModel());
            tblTickets.repaint();
            tblTickets.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tblTickets.getSelectionModel().addListSelectionListener(this.tblTickets);
        }
    }// end refresh method
    
    /**
     * valueChanged method change listener for ticket selection
     * @param e 
     */
    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            
            // get ticket number from selected row
            String ticketNumber = (String) tblTickets.getValueAt(
                    tblTickets.getSelectedRow(), 0);
            // create ticket frame
            new TicketFrame(false,
                    ticketNumber,userID,name,
                    firstName,lastName,department,
                isAdmin,isManager,isEngineer,isAnalyst,isTech);
        }
    }// end valueChange method

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewTicket;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JMenuBar mnuBar;
    private javax.swing.JMenu mnuGuide;
    private javax.swing.JMenuItem mnuGuideDelete;
    private javax.swing.JMenuItem mnuGuideEdit;
    private javax.swing.JMenuItem mnuGuideSearch;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenu mnuTicket;
    private javax.swing.JMenuItem mnuTicketClose;
    private javax.swing.JMenuItem mnuTicketEdit;
    private javax.swing.JMenuItem mnuTicketLock;
    private javax.swing.JMenuItem mnuTicketNew;
    private javax.swing.JMenuItem mnuTicketSearch;
    private javax.swing.JTable tblTickets;
    // End of variables declaration//GEN-END:variables
}// end TechSupportInternal Frame
