package Messaging;

import Account.AccountNotification;
import Query.QueryMessages;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 * MessagesInternalFrame.java - JInternalFrame that handles user access and 
 * viewing of their respective inbox.
 * CSIS 643 - D01
 * @author NoFac3
 */
public class MessagesInternalFrame extends javax.swing.JInternalFrame {

    public String empName,userID,firstName,lastName,department,name;
    boolean isAdmin=false, isManager=false;
    
    /**
     * Creates new form MessagesInternalFrame
     * @param userID
     * @param isEngineer
     * @param firstName
     * @param name
     * @param isManager
     * @param department
     * @param isAdmin
     * @param lastName
     * @param isAnalyst
     * @param isTech
     */
    public MessagesInternalFrame(String userID, String name, 
            String firstName, String lastName, String department, 
            boolean isAdmin, boolean isManager, boolean isEngineer, 
            boolean isAnalyst, boolean isTech) 
    {
        super("",true,false,true);
        initComponents();
        
        // set internal frame title
        setTitle("Messages for "+name);
        // set user values
        empName = name;
        this.userID = userID;
        this.firstName = firstName;
        this.lastName = lastName;
        this.department = department;
        this.name = name;
        this.isAdmin = isAdmin;
        this.isManager = isManager;
        // set filter fro recieved message inbox
        cmbType.setSelectedItem("RECEIVED");
        // update table
        refresh();
        this.pack();
        
        // instantiate new Account notification
        AccountNotification notify = new AccountNotification(this);
    }// end constructor method
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblMessages = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnRefresh = new javax.swing.JButton();
        btnNewMessage = new javax.swing.JButton();
        cmbType = new javax.swing.JComboBox<>();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        tblMessages.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "MESSAGEKEY", "READ", "TYPE", "FROM", "TO", "DATE SENT", "TIME SENT", "SUBJECT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMessages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMessagesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMessages);
        if (tblMessages.getColumnModel().getColumnCount() > 0) {
            tblMessages.getColumnModel().getColumn(0).setPreferredWidth(70);
            tblMessages.getColumnModel().getColumn(0).setMaxWidth(80);
            tblMessages.getColumnModel().getColumn(1).setPreferredWidth(60);
            tblMessages.getColumnModel().getColumn(1).setMaxWidth(75);
            tblMessages.getColumnModel().getColumn(2).setPreferredWidth(80);
            tblMessages.getColumnModel().getColumn(2).setMaxWidth(90);
            tblMessages.getColumnModel().getColumn(6).setPreferredWidth(80);
            tblMessages.getColumnModel().getColumn(6).setMaxWidth(90);
        }

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/27.png"))); // NOI18N
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnNewMessage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/03.png"))); // NOI18N
        btnNewMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewMessageActionPerformed(evt);
            }
        });

        cmbType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Received", "Sent" }));
        cmbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTypeChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnNewMessage)
                        .addComponent(btnRefresh)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 848, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * btnRefreshActionPerformed button method
     * @param evt 
     */
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed
    // end btnRefreshActionPerformed method
    
    /**
     * btnNewMessageActionPerformed button method
     * @param evt 
     */
    private void btnNewMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewMessageActionPerformed
        JFrame frame = new MessageFrame(true,null,userID,name,firstName,lastName,department,isManager,isAdmin);
        frame.setLocation(this.getLocation());
        frame.setVisible(true);
    }//GEN-LAST:event_btnNewMessageActionPerformed
    // end btnNewMessageActionPerformed button method
    
    /**
     * tblMessagesMouseClicked mouse listener method to display a message when 
     * the user selects a row in the message table
     * @param evt mouse click
     */
    private void tblMessagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMessagesMouseClicked
        int row = tblMessages.getSelectedRow();// get row number
        
        if (row!=-1) // check if table row is selected
        {
            //get message key
            String messageKey = tblMessages.getModel().getValueAt(row, 0).toString();
            // Display messsage frame
            JFrame frame = new MessageFrame(
                    false,messageKey,userID,name,
                    firstName,lastName,department,isManager,isAdmin);
            frame.setLocation(this.getLocation());
            frame.setVisible(true);
        }     
    }//GEN-LAST:event_tblMessagesMouseClicked
    //end tblMessagesMouseClicked method
    
    /**
     * cmbTypeChanged listener method that calls refresh method when user changes 
     * the message type filter, Received vs Sent
     * @param evt comboBox new item selected
     */
    private void cmbTypeChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTypeChanged
        refresh();
    }//GEN-LAST:event_cmbTypeChanged
    //end cmbTypeChanged method
    
    /**
     * refresh method used to update the message table model relative to the selected filter
     */
    public void refresh()
    {
        // Instantiate new QueryMessage object and retrieve all users messages
        QueryMessages qm = new QueryMessages();
        qm.selectMessages(userID,cmbType.getSelectedItem().toString());
        // get table model
        DefaultTableModel model = qm.getModel();
        // check ffor null results
        if (model != null) 
        {
            // update table with results
            tblMessages.setAutoCreateRowSorter(true);
            tblMessages.setModel(model);
            tblMessages.repaint();
            tblMessages.getSelectionModel().addListSelectionListener(this.tblMessages);
        } else// null results
        {
            clearTable();// clear table
        }
    }// end refresh method
    
    /**
     * clearTable called to remove all rows from table when model data is null
     */
    private void clearTable()
    {
        DefaultTableModel model = (DefaultTableModel) tblMessages.getModel();
        model.setRowCount(0);
    }// end clearTable method

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewMessage;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox<String> cmbType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblMessages;
    // End of variables declaration//GEN-END:variables
}// end MessagesInternalFrame class
